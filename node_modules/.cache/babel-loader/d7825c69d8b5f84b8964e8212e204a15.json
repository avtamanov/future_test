{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\WebstormProjects\\\\react-future_test\\\\src\\\\Components\\\\Table\\\\SuperTable.js\";\nimport React, { useEffect, useState } from 'react';\nimport SuperHeader from './SuperHeader';\nimport SuperBody from './SuperBody';\nimport SuperPaginator from \"./SuperPaginator\";\nimport SuperLinesSelector from \"./SuperLinesSelector\";\nimport SuperSearch from \"./SuperSearch\";\nimport SuperItemAdded from \"./SuperItemAdded\";\nconst LINES_ON_PAGE = 50; // lines on page by default\n\nconst SuperTable = React.memo(function (props) {\n  // all data from response\n  const [totalData, setTotalData] = useState([]); // client searched part of data\n\n  const [searchedData, setSearchedData] = useState([]); // part of searched data shown right now\n\n  const [curData, setCurData] = useState([]);\n  const [columnNames, setColumnsNames] = useState([]);\n  const [sortedTag, setSortedTag] = useState('');\n  const [searchStr, setSearchStr] = useState('');\n  const [choosenPage, setChoosenPage] = useState(1);\n  const [linesOnPage, setLinesOnPage] = useState(LINES_ON_PAGE); // save data after receiving request\n\n  useEffect(() => {\n    if (props.data && props.data !== [] && props.data[0] !== undefined) {\n      // set column names\n      let tempColumns = [];\n\n      for (let tempProps in props.data[0]) {\n        tempColumns.push(tempProps);\n      }\n\n      setColumnsNames(tempColumns);\n      console.log(props.data);\n      setSearchedData(props.data);\n      setTotalData(props.data);\n      /*\r\n                  // form pages\r\n                  let shownData = [];\r\n                  for(let i = linesOnPage*(choosenPage - 1); i < linesOnPage*choosenPage && i < props.data.length; i++){\r\n                      shownData.push(props.data[i]);\r\n                  }\r\n                  setCurData(shownData);*/\n    }\n  }, [props]);\n  useEffect(() => {\n    // update pages\n    let shownData = [];\n\n    for (let i = linesOnPage * (choosenPage - 1); i < linesOnPage * choosenPage && i < searchedData.length; i++) {\n      shownData.push(searchedData[i]);\n    }\n\n    setCurData(shownData);\n  }, [choosenPage, linesOnPage, searchedData, totalData]);\n  useEffect(() => {\n    // search\n    let searchedArr = [];\n\n    if (searchStr !== '') {\n      for (let i = 0; i < totalData.length; i++) {\n        for (let itemProp in totalData[i]) {\n          if (('' + totalData[i][itemProp]).toLowerCase().includes(searchStr)) {\n            searchedArr.push(totalData[i]);\n            break;\n          }\n        }\n      }\n\n      setSearchedData(searchedArr);\n    } else {\n      setSearchedData(totalData);\n    }\n  }, [searchStr, totalData]); // save data after sort\n\n  useEffect(() => {\n    if (sortedTag) {\n      if (sortedTag.includes('+')) {\n        setSearchedData([...searchedData.reverse()]);\n        setChoosenPage(1);\n      } else {\n        setSearchedData([...searchedData.sort((a, b) => a[sortedTag] < b[sortedTag] ? -1 : a[sortedTag] > b[sortedTag] ? 1 : 0)]);\n        setChoosenPage(1);\n      }\n    }\n  }, [sortedTag]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(SuperPaginator, {\n    page: choosenPage,\n    setPage: setChoosenPage,\n    linesTotal: props.data && props.data !== [] ? props.data.length : 0,\n    linesOnPage: linesOnPage,\n    searchString: searchStr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SuperLinesSelector, {\n    lines: linesOnPage,\n    setLines: setLinesOnPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SuperSearch, {\n    str: searchStr,\n    setStr: setSearchStr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SuperItemAdded, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SuperHeader, {\n    columns: columnNames,\n    sortedTag: sortedTag,\n    setSortedTag: setSortedTag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SuperBody, {\n    curData: curData,\n    setCurData: setCurData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  })));\n});\nexport default SuperTable;","map":{"version":3,"sources":["C:/Users/User/WebstormProjects/react-future_test/src/Components/Table/SuperTable.js"],"names":["React","useEffect","useState","SuperHeader","SuperBody","SuperPaginator","SuperLinesSelector","SuperSearch","SuperItemAdded","LINES_ON_PAGE","SuperTable","memo","props","totalData","setTotalData","searchedData","setSearchedData","curData","setCurData","columnNames","setColumnsNames","sortedTag","setSortedTag","searchStr","setSearchStr","choosenPage","setChoosenPage","linesOnPage","setLinesOnPage","data","undefined","tempColumns","tempProps","push","console","log","shownData","i","length","searchedArr","itemProp","toLowerCase","includes","reverse","sort","a","b"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport SuperHeader from './SuperHeader'\r\nimport SuperBody from './SuperBody'\r\nimport SuperPaginator from \"./SuperPaginator\";\r\nimport SuperLinesSelector from \"./SuperLinesSelector\";\r\nimport SuperSearch from \"./SuperSearch\";\r\nimport SuperItemAdded from \"./SuperItemAdded\";\r\n\r\nconst LINES_ON_PAGE = 50; // lines on page by default\r\n\r\nconst SuperTable = React.memo(function(props){\r\n\r\n    // all data from response\r\n    const [totalData, setTotalData] = useState([]);\r\n    // client searched part of data\r\n    const [searchedData, setSearchedData] = useState([]);\r\n    // part of searched data shown right now\r\n    const [curData, setCurData] = useState([]);\r\n\r\n    const [columnNames, setColumnsNames] = useState([]);\r\n    const [sortedTag, setSortedTag] = useState('');\r\n    const [searchStr, setSearchStr] = useState('');\r\n\r\n    const [choosenPage, setChoosenPage] = useState(1);\r\n    const [linesOnPage, setLinesOnPage] = useState(LINES_ON_PAGE);\r\n\r\n    // save data after receiving request\r\n    useEffect(()=>{\r\n        if(props.data && props.data !== [] && props.data[0] !== undefined){\r\n            // set column names\r\n            let tempColumns = []\r\n            for(let tempProps in props.data[0]){\r\n                tempColumns.push(tempProps);\r\n            }\r\n            setColumnsNames(tempColumns);\r\n            console.log(props.data)\r\n            setSearchedData(props.data);\r\n            setTotalData(props.data);\r\n/*\r\n            // form pages\r\n            let shownData = [];\r\n            for(let i = linesOnPage*(choosenPage - 1); i < linesOnPage*choosenPage && i < props.data.length; i++){\r\n                shownData.push(props.data[i]);\r\n            }\r\n            setCurData(shownData);*/\r\n        }\r\n    },[props]);\r\n\r\n    useEffect(()=>{\r\n                // update pages\r\n        let shownData = [];\r\n        for(let i = linesOnPage*(choosenPage - 1); i < linesOnPage*choosenPage && i < searchedData.length; i++){\r\n            shownData.push(searchedData[i]);\r\n        }\r\n        setCurData(shownData);\r\n    }, [choosenPage, linesOnPage, searchedData, totalData]);\r\n    \r\n    useEffect(()=>{\r\n        // search\r\n        let searchedArr = [];\r\n        if(searchStr !== '') {\r\n            for (let i = 0; i < totalData.length; i++) {\r\n                for (let itemProp in totalData[i]) {\r\n                    if (('' + totalData[i][itemProp]).toLowerCase().includes(searchStr)) {\r\n                        searchedArr.push(totalData[i]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            setSearchedData(searchedArr);\r\n        } else {\r\n            setSearchedData(totalData);\r\n        }\r\n    }, [searchStr, totalData])\r\n\r\n    // save data after sort\r\n    useEffect(() => {\r\n        if(sortedTag){\r\n            if(sortedTag.includes('+')) {\r\n                setSearchedData([...searchedData.reverse()]);\r\n                setChoosenPage(1)\r\n            }\r\n            else{\r\n                setSearchedData([...searchedData.sort((a, b) => a[sortedTag] < b[sortedTag] ? -1 : a[sortedTag] > b[sortedTag] ? 1 : 0)]);\r\n                setChoosenPage(1);\r\n            }\r\n        }\r\n    }, [sortedTag]);\r\n\r\n    return <div className='table'>\r\n        <SuperPaginator page={choosenPage}\r\n                        setPage={setChoosenPage}\r\n                        linesTotal={props.data && props.data !== [] ? props.data.length : 0}\r\n                        linesOnPage={linesOnPage}\r\n                        searchString={searchStr}/>\r\n        <SuperLinesSelector lines={linesOnPage} setLines={setLinesOnPage}/>\r\n        <SuperSearch str={searchStr} setStr={setSearchStr}/>\r\n        <SuperItemAdded />\r\n        <table>\r\n            <SuperHeader columns={columnNames} sortedTag={sortedTag} setSortedTag={setSortedTag}/>\r\n            <SuperBody curData={curData} setCurData={setCurData}/>\r\n        </table>\r\n    </div>\r\n});\r\n\r\nexport default SuperTable;"]},"metadata":{},"sourceType":"module"}